<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZZWR</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zanzong.github.io/"/>
  <updated>2019-08-28T03:50:48.588Z</updated>
  <id>http://zanzong.github.io/</id>
  
  <author>
    <name>zongzan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://zanzong.github.io/passages/0.html"/>
    <id>http://zanzong.github.io/passages/0.html</id>
    <published>2019-08-28T03:43:26.458Z</published>
    <updated>2019-08-28T03:50:48.588Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.8.0"><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"><meta name="abbrlink" content="c7d551e3"><meta name="date" content="2019-04-13 22:28:51"><meta name="tags" content="Spark"><meta name="categories" content="大数据系统"><style>body {  max-width: 980px;  border: 1px solid #ddd;  outline: 1300px solid #fff;  margin: 16px auto;}body .markdown-body{  padding: 45px;}@font-face {  font-family: fontawesome-mini;  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');}.markdown-body {  font-family: sans-serif;  -ms-text-size-adjust: 100%;  -webkit-text-size-adjust: 100%;  color: #333333;  overflow: hidden;  font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif;  font-size: 16px;  line-height: 1.6;  word-wrap: break-word;}.markdown-body a {  background: transparent;}.markdown-body a:active,.markdown-body a:hover {  outline: 0;}.markdown-body b,.markdown-body strong {  font-weight: bold;}.markdown-body mark {  background: #ff0;  color: #000;  font-style: italic;  font-weight: bold;}.markdown-body sub,.markdown-body sup {  font-size: 75%;  line-height: 0;  position: relative;  vertical-align: baseline;}.markdown-body sup {  top: -0.5em;}.markdown-body sub {  bottom: -0.25em;}.markdown-body h1 {  font-size: 2em;  margin: 0.67em 0;}.markdown-body img {  border: 0;}.markdown-body hr {  -moz-box-sizing: content-box;  box-sizing: content-box;  height: 0;}.markdown-body pre {  overflow: auto;}.markdown-body code,.markdown-body kbd,.markdown-body pre,.markdown-body samp {  font-family: monospace, monospace;  font-size: 1em;}.markdown-body input {  color: inherit;  font: inherit;  margin: 0;}.markdown-body html input[disabled] {  cursor: default;}.markdown-body input {  line-height: normal;}.markdown-body input[type="checkbox"] {  box-sizing: border-box;  padding: 0;}.markdown-body table {  border-collapse: collapse;  border-spacing: 0;}.markdown-body td,.markdown-body th {  padding: 0;}.markdown-body .codehilitetable {  border: 0;  border-spacing: 0;}.markdown-body .codehilitetable tr {  border: 0;}.markdown-body .codehilitetable pre,.markdown-body .codehilitetable div.codehilite {  margin: 0;}.markdown-body .linenos,.markdown-body .code,.markdown-body .codehilitetable td {  border: 0;  padding: 0;}.markdown-body td:not(.linenos) .linenodiv {  padding: 0 !important;}.markdown-body .code {  width: 100%;}.markdown-body .linenos div pre,.markdown-body .linenodiv pre,.markdown-body .linenodiv {  border: 0;  -webkit-border-radius: 0;  -moz-border-radius: 0;  border-radius: 0;  -webkit-border-top-left-radius: 3px;  -webkit-border-bottom-left-radius: 3px;  -moz-border-radius-topleft: 3px;  -moz-border-radius-bottomleft: 3px;  border-top-left-radius: 3px;  border-bottom-left-radius: 3px;}.markdown-body .code div pre,.markdown-body .code div {  border: 0;  -webkit-border-radius: 0;  -moz-border-radius: 0;  border-radius: 0;  -webkit-border-top-right-radius: 3px;  -webkit-border-bottom-right-radius: 3px;  -moz-border-radius-topright: 3px;  -moz-border-radius-bottomright: 3px;  border-top-right-radius: 3px;  border-bottom-right-radius: 3px;}.markdown-body * {  -moz-box-sizing: border-box;  box-sizing: border-box;}.markdown-body input {  font: 13px Helvetica, arial, freesans, clean, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol";  line-height: 1.4;}.markdown-body a {  color: #4183c4;  text-decoration: none;}.markdown-body a:hover,.markdown-body a:focus,.markdown-body a:active {  text-decoration: underline;}.markdown-body hr {  height: 0;  margin: 15px 0;  overflow: hidden;  background: transparent;  border: 0;  border-bottom: 1px solid #ddd;}.markdown-body hr:before,.markdown-body hr:after {  display: table;  content: " ";}.markdown-body hr:after {  clear: both;}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6 {  margin-top: 15px;  margin-bottom: 15px;  line-height: 1.1;}.markdown-body h1 {  font-size: 30px;}.markdown-body h2 {  font-size: 21px;}.markdown-body h3 {  font-size: 16px;}.markdown-body h4 {  font-size: 14px;}.markdown-body h5 {  font-size: 12px;}.markdown-body h6 {  font-size: 11px;}.markdown-body blockquote {  margin: 0;}.markdown-body ul,.markdown-body ol {  padding: 0;  margin-top: 0;  margin-bottom: 0;}.markdown-body ol ol,.markdown-body ul ol {  list-style-type: lower-roman;}.markdown-body ul ul ol,.markdown-body ul ol ol,.markdown-body ol ul ol,.markdown-body ol ol ol {  list-style-type: lower-alpha;}.markdown-body dd {  margin-left: 0;}.markdown-body code,.markdown-body pre,.markdown-body samp {  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;  font-size: 12px;}.markdown-body pre {  margin-top: 0;  margin-bottom: 0;}.markdown-body kbd {  background-color: #e7e7e7;  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);  background-image: linear-gradient(#fefefe, #e7e7e7);  background-repeat: repeat-x;  border-radius: 2px;  border: 1px solid #cfcfcf;  color: #000;  padding: 3px 5px;  line-height: 10px;  font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace;  display: inline-block;}.markdown-body>*:first-child {  margin-top: 0 !important;}.markdown-body>*:last-child {  margin-bottom: 0 !important;}.markdown-body .headerlink {  font: normal 400 16px fontawesome-mini;  vertical-align: middle;  margin-left: -16px;  float: left;  display: inline-block;  text-decoration: none;  opacity: 0;  color: #333;}.markdown-body .headerlink:focus {  outline: none;}.markdown-body h1 .headerlink {  margin-top: 0.8rem;}.markdown-body h2 .headerlink,.markdown-body h3 .headerlink {  margin-top: 0.6rem;}.markdown-body h4 .headerlink {  margin-top: 0.2rem;}.markdown-body h5 .headerlink,.markdown-body h6 .headerlink {  margin-top: 0;}.markdown-body .headerlink:hover,.markdown-body h1:hover .headerlink,.markdown-body h2:hover .headerlink,.markdown-body h3:hover .headerlink,.markdown-body h4:hover .headerlink,.markdown-body h5:hover .headerlink,.markdown-body h6:hover .headerlink {  opacity: 1;  text-decoration: none;}.markdown-body h1 {  padding-bottom: 0.3em;  font-size: 2.25em;  line-height: 1.2;  border-bottom: 1px solid #eee;}.markdown-body h2 {  padding-bottom: 0.3em;  font-size: 1.75em;  line-height: 1.225;  border-bottom: 1px solid #eee;}.markdown-body h3 {  font-size: 1.5em;  line-height: 1.43;}.markdown-body h4 {  font-size: 1.25em;}.markdown-body h5 {  font-size: 1em;}.markdown-body h6 {  font-size: 1em;  color: #777;}.markdown-body p,.markdown-body blockquote,.markdown-body ul,.markdown-body ol,.markdown-body dl,.markdown-body table,.markdown-body pre,.markdown-body .admonition {  margin-top: 0;  margin-bottom: 16px;}.markdown-body hr {  height: 4px;  padding: 0;  margin: 16px 0;  background-color: #e7e7e7;  border: 0 none;}.markdown-body ul,.markdown-body ol {  padding-left: 2em;}.markdown-body ul ul,.markdown-body ul ol,.markdown-body ol ol,.markdown-body ol ul {  margin-top: 0;  margin-bottom: 0;}.markdown-body li>p {  margin-top: 16px;}.markdown-body dl {  padding: 0;}.markdown-body dl dt {  padding: 0;  margin-top: 16px;  font-size: 1em;  font-style: italic;  font-weight: bold;}.markdown-body dl dd {  padding: 0 16px;  margin-bottom: 16px;}.markdown-body blockquote {  padding: 0 15px;  color: #777;  border-left: 4px solid #ddd;}.markdown-body blockquote>:first-child {  margin-top: 0;}.markdown-body blockquote>:last-child {  margin-bottom: 0;}.markdown-body table {  display: block;  width: 100%;  overflow: auto;  word-break: normal;  word-break: keep-all;}.markdown-body table th {  font-weight: bold;}.markdown-body table th,.markdown-body table td {  padding: 6px 13px;  border: 1px solid #ddd;}.markdown-body table tr {  background-color: #fff;  border-top: 1px solid #ccc;}.markdown-body table tr:nth-child(2n) {  background-color: #f8f8f8;}.markdown-body img {  max-width: 100%;  -moz-box-sizing: border-box;  box-sizing: border-box;}.markdown-body code,.markdown-body samp {  padding: 0;  padding-top: 0.2em;  padding-bottom: 0.2em;  margin: 0;  font-size: 85%;  background-color: rgba(0,0,0,0.04);  border-radius: 3px;}.markdown-body code:before,.markdown-body code:after {  letter-spacing: -0.2em;  content: "\00a0";}.markdown-body pre>code {  padding: 0;  margin: 0;  font-size: 100%;  word-break: normal;  white-space: pre;  background: transparent;  border: 0;}.markdown-body .codehilite {  margin-bottom: 16px;}.markdown-body .codehilite pre,.markdown-body pre {  padding: 16px;  overflow: auto;  font-size: 85%;  line-height: 1.45;  background-color: #f7f7f7;  border-radius: 3px;}.markdown-body .codehilite pre {  margin-bottom: 0;  word-break: normal;}.markdown-body pre {  word-wrap: normal;}.markdown-body pre code {  display: inline;  max-width: initial;  padding: 0;  margin: 0;  overflow: initial;  line-height: inherit;  word-wrap: normal;  background-color: transparent;  border: 0;}.markdown-body pre code:before,.markdown-body pre code:after {  content: normal;}/* Admonition */.markdown-body .admonition {  -webkit-border-radius: 3px;  -moz-border-radius: 3px;  position: relative;  border-radius: 3px;  border: 1px solid #e0e0e0;  border-left: 6px solid #333;  padding: 10px 10px 10px 30px;}.markdown-body .admonition table {  color: #333;}.markdown-body .admonition p {  padding: 0;}.markdown-body .admonition-title {  font-weight: bold;  margin: 0;}.markdown-body .admonition>.admonition-title {  color: #333;}.markdown-body .attention>.admonition-title {  color: #a6d796;}.markdown-body .caution>.admonition-title {  color: #d7a796;}.markdown-body .hint>.admonition-title {  color: #96c6d7;}.markdown-body .danger>.admonition-title {  color: #c25f77;}.markdown-body .question>.admonition-title {  color: #96a6d7;}.markdown-body .note>.admonition-title {  color: #d7c896;}.markdown-body .admonition:before,.markdown-body .attention:before,.markdown-body .caution:before,.markdown-body .hint:before,.markdown-body .danger:before,.markdown-body .question:before,.markdown-body .note:before {  font: normal normal 16px fontawesome-mini;  -moz-osx-font-smoothing: grayscale;  -webkit-user-select: none;  -moz-user-select: none;  -ms-user-select: none;  user-select: none;  line-height: 1.5;  color: #333;  position: absolute;  left: 0;  top: 0;  padding-top: 10px;  padding-left: 10px;}.markdown-body .admonition:before {  content: "\f056\00a0";  color: 333;}.markdown-body .attention:before {  content: "\f058\00a0";  color: #a6d796;}.markdown-body .caution:before {  content: "\f06a\00a0";  color: #d7a796;}.markdown-body .hint:before {  content: "\f05a\00a0";  color: #96c6d7;}.markdown-body .danger:before {  content: "\f057\00a0";  color: #c25f77;}.markdown-body .question:before {  content: "\f059\00a0";  color: #96a6d7;}.markdown-body .note:before {  content: "\f040\00a0";  color: #d7c896;}.markdown-body .admonition::after {  content: normal;}.markdown-body .attention {  border-left: 6px solid #a6d796;}.markdown-body .caution {  border-left: 6px solid #d7a796;}.markdown-body .hint {  border-left: 6px solid #96c6d7;}.markdown-body .danger {  border-left: 6px solid #c25f77;}.markdown-body .question {  border-left: 6px solid #96a6d7;}.markdown-body .note {  border-left: 6px solid #d7c896;}.markdown-body .admonition>*:first-child {  margin-top: 0 !important;}.markdown-body .admonition>*:last-child {  margin-bottom: 0 !important;}/* progress bar*/.markdown-body .progress {  display: block;  width: 300px;  margin: 10px 0;  height: 24px;  -webkit-border-radius: 3px;  -moz-border-radius: 3px;  border-radius: 3px;  background-color: #ededed;  position: relative;  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);}.markdown-body .progress-label {  position: absolute;  text-align: center;  font-weight: bold;  width: 100%; margin: 0;  line-height: 24px;  color: #333;  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;  -webkit-font-smoothing: antialiased !important;  white-space: nowrap;  overflow: hidden;}.markdown-body .progress-bar {  height: 24px;  float: left;  -webkit-border-radius: 3px;  -moz-border-radius: 3px;  border-radius: 3px;  background-color: #96c6d7;  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);  background-size: 30px 30px;  background-image: -webkit-linear-gradient(    135deg, rgba(255, 255, 255, .4) 27%,    transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%,    transparent 77%, transparent  );  background-image: -moz-linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );  background-image: -ms-linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );  background-image: -o-linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );  background-image: linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );}.markdown-body .progress-100plus .progress-bar {  background-color: #a6d796;}.markdown-body .progress-80plus .progress-bar {  background-color: #c6d796;}.markdown-body .progress-60plus .progress-bar {  background-color: #d7c896;}.markdown-body .progress-40plus .progress-bar {  background-color: #d7a796;}.markdown-body .progress-20plus .progress-bar {  background-color: #d796a6;}.markdown-body .progress-0plus .progress-bar {  background-color: #c25f77;}.markdown-body .candystripe-animate .progress-bar{  -webkit-animation: animate-stripes 3s linear infinite;  -moz-animation: animate-stripes 3s linear infinite;  animation: animate-stripes 3s linear infinite;}@-webkit-keyframes animate-stripes {  0% {    background-position: 0 0;  }  100% {    background-position: 60px 0;  }}@-moz-keyframes animate-stripes {  0% {    background-position: 0 0;  }  100% {    background-position: 60px 0;  }}@keyframes animate-stripes {  0% {    background-position: 0 0;  }  100% {    background-position: 60px 0;  }}.markdown-body .gloss .progress-bar {  box-shadow:    inset 0 4px 12px rgba(255, 255, 255, .7),    inset 0 -12px 0 rgba(0, 0, 0, .05);}/* MultiMarkdown Critic Blocks */.markdown-body .critic_mark {  background: #ff0;}.markdown-body .critic_delete {  color: #c82829;  text-decoration: line-through;}.markdown-body .critic_insert {  color: #718c00 ;  text-decoration: underline;}.markdown-body .critic_comment {  color: #8e908c;  font-style: italic;}.markdown-body .headeranchor {  font: normal normal 16px fontawesome-mini;  line-height: 1;  display: inline-block;  text-decoration: none;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  -webkit-user-select: none;  -moz-user-select: none;  -ms-user-select: none;  user-select: none;}.headeranchor:before {  content: '\e157';}.markdown-body .task-list-item {  list-style-type: none;}.markdown-body .task-list-item+.task-list-item {  margin-top: 3px;}.markdown-body .task-list-item input {  margin: 0 4px 0.25em -20px;  vertical-align: middle;}/* Media */@media only screen and (min-width: 480px) {  .markdown-body {    font-size:14px;  }}@media only screen and (min-width: 768px) {  .markdown-body {    font-size:16px;  }}@media print {  .markdown-body * {    background: transparent !important;    color: black !important;    filter:none !important;    -ms-filter: none !important;  }  .markdown-body {    font-size:12pt;    max-width:100%;    outline:none;    border: 0;  }  .markdown-body a,  .markdown-body a:visited {    text-decoration: underline;  }  .markdown-body .headeranchor-link {    display: none;  }  .markdown-body a[href]:after {    content: " (" attr(href) ")";  }  .markdown-body abbr[title]:after {    content: " (" attr(title) ")";  }  .markdown-body .ir a:after,  .markdown-body a[href^="javascript:"]:after,  .markdown-body a[href^="#"]:after {    content: "";  }  .markdown-body pre {    white-space: pre;    white-space: pre-wrap;    word-wrap: break-word;  }  .markdown-body pre,  .markdown-body blockquote {    border: 1px solid #999;    padding-right: 1em;    page-break-inside: avoid;  }  .markdown-body .progress,  .markdown-body .progress-bar {    -moz-box-shadow: none;    -webkit-box-shadow: none;    box-shadow: none;  }  .markdown-body .progress {    border: 1px solid #ddd;  }  .markdown-body .progress-bar {    height: 22px;    border-right: 1px solid #ddd;  }  .markdown-body tr,  .markdown-body img {    page-break-inside: avoid;  }  .markdown-body img {    max-width: 100% !important;  }  .markdown-body p,  .markdown-body h2,  .markdown-body h3 {    orphans: 3;    widows: 3;  }  .markdown-body h2,  .markdown-body h3 {    page-break-after: avoid;  }}</style><style>/*GitHub*/.codehilite {background-color:#fff;color:#333333;}.codehilite .hll {background-color:#ffffcc;}.codehilite .c{color:#999988;font-style:italic}.codehilite .err{color:#a61717;background-color:#e3d2d2}.codehilite .k{font-weight:bold}.codehilite .o{font-weight:bold}.codehilite .cm{color:#999988;font-style:italic}.codehilite .cp{color:#999999;font-weight:bold}.codehilite .c1{color:#999988;font-style:italic}.codehilite .cs{color:#999999;font-weight:bold;font-style:italic}.codehilite .gd{color:#000000;background-color:#ffdddd}.codehilite .ge{font-style:italic}.codehilite .gr{color:#aa0000}.codehilite .gh{color:#999999}.codehilite .gi{color:#000000;background-color:#ddffdd}.codehilite .go{color:#888888}.codehilite .gp{color:#555555}.codehilite .gs{font-weight:bold}.codehilite .gu{color:#800080;font-weight:bold}.codehilite .gt{color:#aa0000}.codehilite .kc{font-weight:bold}.codehilite .kd{font-weight:bold}.codehilite .kn{font-weight:bold}.codehilite .kp{font-weight:bold}.codehilite .kr{font-weight:bold}.codehilite .kt{color:#445588;font-weight:bold}.codehilite .m{color:#009999}.codehilite .s{color:#dd1144}.codehilite .n{color:#333333}.codehilite .na{color:teal}.codehilite .nb{color:#0086b3}.codehilite .nc{color:#445588;font-weight:bold}.codehilite .no{color:teal}.codehilite .ni{color:purple}.codehilite .ne{color:#990000;font-weight:bold}.codehilite .nf{color:#990000;font-weight:bold}.codehilite .nn{color:#555555}.codehilite .nt{color:navy}.codehilite .nv{color:teal}.codehilite .ow{font-weight:bold}.codehilite .w{color:#bbbbbb}.codehilite .mf{color:#009999}.codehilite .mh{color:#009999}.codehilite .mi{color:#009999}.codehilite .mo{color:#009999}.codehilite .sb{color:#dd1144}.codehilite .sc{color:#dd1144}.codehilite .sd{color:#dd1144}.codehilite .s2{color:#dd1144}.codehilite .se{color:#dd1144}.codehilite .sh{color:#dd1144}.codehilite .si{color:#dd1144}.codehilite .sx{color:#dd1144}.codehilite .sr{color:#009926}.codehilite .s1{color:#dd1144}.codehilite .ss{color:#990073}.codehilite .bp{color:#999999}.codehilite .vc{color:teal}.codehilite .vg{color:teal}.codehilite .vi{color:teal}.codehilite .il{color:#009999}.codehilite .gc{color:#999;background-color:#EAF2F5}</style><title>Spark History Server使用指南</title></head><body><article class="markdown-body"><p>在使用Spark计算框架时，由于 Debug 、调优等的需要，常需要查看 Application 的运行时的详细信息。在 Spark 的 WebUI 上可以通过点击每个应用查看，而该应用执行完毕后，页面失效无法打开。Spark 提供了 <code>History Server</code> 来记录负载的详细运行时信息。</p><h1 id="historyserver">启动HistoryServer<a class="headerlink" href="#historyserver" title="Permanent link"></a></h1><p><a href="https://spark.apache.org/docs/latest/monitoring.html" target="_blank" rel="noopener">官方文档</a></p><ol><li><p>配置日志存放地址。 History Server将日志保存在 Spark 支持的文件系统，例如 HDFS。 <div class="codehilite"><pre><span class="c1"># 在HDFS创建用于存放日志的目录</span>hdfs dfs -mkdir /sparklogs</pre></div></p></li><li><p>修改配置文件配置文件 <code>spark-env.sh</code>，增加<div class="codehilite"><pre><span class="c1"># 设置history server进程可使用的最大内存，默认1G</span><span class="nv">SPARK_DAEMON_MEMORY</span><span class="o">=</span>6g<span class="c1"># 设置logDirectory指向刚创建的目录</span><span class="nv">SPARK_HISTORY_OPTS</span><span class="o">=</span><span class="s2">&quot;-Dspark.history.fs.logDirectory=hdfs://172.16.244.5:9000/sparklogs&quot;</span></pre></div>配置文件 <code>spark-defaults.conf</code>，增加<div class="codehilite"><pre><span class="c1"># 设置为true将使用spark.io.compression.codec配置的压缩方法进行压缩，默认为 lz4</span>spark.eventLog.compress          <span class="nb">true</span><span class="c1"># 开启 eventLog</span>spark.eventLog.enabled           <span class="nb">true</span>spark.eventLog.dir               hdfs://172.16.244.5:9000/sparklogs</pre></div></p></li><li>启动 History Server</li></ol><p><div class="codehilite"><pre>./sbin/start-history-server.sh</pre></div>启动后，可在Web页面http://master:18080（默认18080端口）看到如下页面<img alt src="/images/2019/historyserver1.jpg"></p></article></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;generator&quot; content=&quot;Hexo 3.8.0&quot;&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-wid
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>梯度下降方法</title>
    <link href="http://zanzong.github.io/passages/3c50d4b7.html"/>
    <id>http://zanzong.github.io/passages/3c50d4b7.html</id>
    <published>2019-05-06T02:18:45.000Z</published>
    <updated>2019-05-07T01:23:38.496Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/c7e642877b0e" target="_blank" rel="noopener">https://www.jianshu.com/p/c7e642877b0e</a><br>梯度下降更新的是模型参数θ<br>&lt;θ0, θ1&gt;<br>Loss=J(θ)<br>目的是：向loss负梯度方向，迭代移动两维的&lt;θ0, θ1&gt;，因此迭代的对象是&lt;θ0, θ1&gt;<br>当theta无法直接写出时，如神经网络、树模型，则直接迭代hθ(x)，即使用θ得到的预测值的误差<br>hθ2(x) = hθ1(x) - α * J(hθ1(x))’,这里的J(hθ1(x))’为loss function的梯度（如果是mse，即整个数据集上的y-y’），hθ(x)可作为θ的黑盒</p><p>对比GBDT、GradientBoosting</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/c7e642877b0e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/c7e642877b0e&lt;/a&gt;&lt;br&gt;梯度下降更新的是模型参
      
    
    </summary>
    
      <category term="机器学习" scheme="http://zanzong.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>[专题]进化算法</title>
    <link href="http://zanzong.github.io/passages/6de60ff7.html"/>
    <id>http://zanzong.github.io/passages/6de60ff7.html</id>
    <published>2019-04-27T15:19:38.000Z</published>
    <updated>2019-05-06T13:10:16.515Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="机器学习" scheme="http://zanzong.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Python在多核CPU加速计算</title>
    <link href="http://zanzong.github.io/passages/b9477d5.html"/>
    <id>http://zanzong.github.io/passages/b9477d5.html</id>
    <published>2019-04-20T07:19:17.000Z</published>
    <updated>2019-05-06T13:00:34.516Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="编程语言" scheme="http://zanzong.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Spark History Server使用指南</title>
    <link href="http://zanzong.github.io/passages/c7d551e3.html"/>
    <id>http://zanzong.github.io/passages/c7d551e3.html</id>
    <published>2019-04-13T14:28:51.000Z</published>
    <updated>2019-08-28T07:14:54.702Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Spark计算框架时，由于 Debug 、调优等的需要，常需要查看 Application 的运行时的详细信息。在 Spark 的 WebUI 上可以通过点击每个应用查看，而该应用执行完毕后，页面失效无法打开。Spark 提供了 <code>History Server</code> 来记录负载的详细运行时信息。</p><h1 id="启动HistoryServer"><a href="#启动HistoryServer" class="headerlink" title="启动HistoryServer"></a>启动HistoryServer</h1><ol><li><p>配置日志存放地址。 History Server将日志保存在 Spark 支持的文件系统，例如 HDFS。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在HDFS创建用于存放日志的目录</span></span><br><span class="line">hdfs dfs -mkdir /sparklogs</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件<br>配置文件 <code>spark-env.sh</code>，增加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置history server进程可使用的最大内存，默认1G</span></span><br><span class="line">SPARK_DAEMON_MEMORY=6g</span><br><span class="line"><span class="comment"># 设置logDirectory指向刚创建的目录</span></span><br><span class="line">SPARK_HISTORY_OPTS=<span class="string">"-Dspark.history.fs.logDirectory=hdfs://172.16.244.5:9000/sparklogs"</span></span><br></pre></td></tr></table></figure></li></ol><p>配置文件 <code>spark-defaults.conf</code>，增加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置为true将使用spark.io.compression.codec配置的压缩方法进行压缩，默认为 lz4</span></span><br><span class="line">spark.eventLog.compress          <span class="literal">true</span></span><br><span class="line"><span class="comment"># 开启 eventLog</span></span><br><span class="line">spark.eventLog.enabled           <span class="literal">true</span></span><br><span class="line">spark.eventLog.dir               hdfs://172.16.244.5:9000/sparklogs</span><br></pre></td></tr></table></figure></p><ol><li>启动 History Server<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/start-history-server.sh</span><br></pre></td></tr></table></figure></li></ol><p>启动后，可在Web页面<a href="http://master:18080（默认18080端口）看到如下页面" target="_blank" rel="noopener">http://master:18080（默认18080端口）看到如下页面</a><br><img src="/images/2019/historyserver1.jpg" alt></p><p>其余配置项可以参考<a href="https://spark.apache.org/docs/latest/monitoring.html" target="_blank" rel="noopener">官方文档</a></p><h1 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h1><p>除了手工查看网页，在使用程序对Application自动监控时，也需要应用的详细执行信息。 History Server 提供使用REST API的方式访问网页, API 地址为 <code>http://&lt;server-url&gt;:18080/api/v1/applications/&lt;application&gt;</code>。 向该地址发送 HTTP 请求，Server 会返回 JSON 格式的信息。 该 API 包括详细的程序执行信息，支持包括applications、jobs、stages、executors等级别的信息查询，详见<a href="https://spark.apache.org/docs/latest/monitoring.html" target="_blank" rel="noopener">官方文档</a>。<br>这里是使用 Python 查询某个application的简要信息的例子。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 查询 app-20190828102157-0009 的提交和结束时间</span></span><br><span class="line">res = requests.get(<span class="string">"http://172.16.244.8:18080/api/v1/applications/app-20190828102157-0009"</span>)</span><br><span class="line">print(res.json())</span><br></pre></td></tr></table></figure></p><p>将输出以下内容<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span> : <span class="string">"app-20190828102157-0009"</span>,</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"gbt-1566958883"</span>,</span><br><span class="line">  <span class="attr">"attempts"</span> : [ &#123;</span><br><span class="line">    <span class="attr">"startTime"</span> : <span class="string">"2019-08-28T02:21:56.000GMT"</span>,</span><br><span class="line">    <span class="attr">"endTime"</span> : <span class="string">"2019-08-28T02:27:24.061GMT"</span>,</span><br><span class="line">    <span class="attr">"lastUpdated"</span> : <span class="string">"2019-08-28T02:27:24.135GMT"</span>,</span><br><span class="line">    <span class="attr">"duration"</span> : <span class="number">328061</span>,</span><br><span class="line">    <span class="attr">"sparkUser"</span> : <span class="string">"ubuntu"</span>,</span><br><span class="line">    <span class="attr">"completed"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"endTimeEpoch"</span> : <span class="number">1566959244061</span>,</span><br><span class="line">    <span class="attr">"lastUpdatedEpoch"</span> : <span class="number">1566959244135</span>,</span><br><span class="line">    <span class="attr">"startTimeEpoch"</span> : <span class="number">1566958916000</span></span><br><span class="line">  &#125; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用Spark计算框架时，由于 Debug 、调优等的需要，常需要查看 Application 的运行时的详细信息。在 Spark 的 WebUI 上可以通过点击每个应用查看，而该应用执行完毕后，页面失效无法打开。Spark 提供了 &lt;code&gt;History Serve
      
    
    </summary>
    
      <category term="大数据系统" scheme="http://zanzong.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Spark" scheme="http://zanzong.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统常用性能指标</title>
    <link href="http://zanzong.github.io/passages/2785cf3a.html"/>
    <id>http://zanzong.github.io/passages/2785cf3a.html</id>
    <published>2019-03-24T11:21:24.000Z</published>
    <updated>2019-03-24T13:10:06.657Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Cycles-per-instruction（CPI）"><a href="#Cycles-per-instruction（CPI）" class="headerlink" title="Cycles per instruction（CPI）"></a>Cycles per instruction（CPI）</h3><p>表示每条计算机指令执行所需的时钟周期，简称指令的平均周期数，即<strong>一个指令被执行时所使用的时钟周期数量</strong>。对于一个程序，计算该程序执行完需要多少条机器指令（ins_num），并结合实际的硬件性能计算出需要多少个时钟周期来完成(cyc_num)<br>，可以得到该段程序在这个硬件上的CPI。对于不同的CPU，运行相同的负载得到的CPI是不同的，因此可以作为衡量不同CPU性能的一项指标。  <a id="more"></a><br>CPI = 执行程序所需要的时钟周期数 / 所执行的指令条数<br>实际上，大多数情况下一段程序会包含多种不同类型的指令，不同类型的指令运行需要不同的指令周期数，可使用如下公式计算<br>\begin{equation}\begin{split}<br>CPI = \frac{\sum_i (IC_i)(CC_i)}{IC}<br>\end{split}\end{equation}<br>其中${IC_i}$是指令类型为i的指令个数，${CC_i}$是完成指令类型i所需要的时钟周期（clock-cycles）个数。$IC=\sum_i{IC_i}$是所有类型指令个数的和。  </p><h3 id="Instructions-per-cycle（IPC）"><a href="#Instructions-per-cycle（IPC）" class="headerlink" title="Instructions per cycle（IPC）"></a>Instructions per cycle（IPC）</h3><p>即CPI的倒数</p><h3 id="Millions-of-instructions-per-second-（MIPS）"><a href="#Millions-of-instructions-per-second-（MIPS）" class="headerlink" title="Millions of instructions per second （MIPS）"></a>Millions of instructions per second （MIPS）</h3><p>Instructions per second（IPS），与CPI类似，也是一种衡量CPU性能的指标。它描述了指令的执行速率，规定了性能和执行时间成反比，即与IPC成正比，与CPI成反比。MIPS这种指标的缺点是没有考虑指令的能力，对于使用不同指令集的计算机，相同的程序产生的指令数是不同的，因此无法用MIPS来比较不同指令集的计算机，这个问题也出现在CPI和IPC以上两个指标上。<br>\begin{equation}\begin{split}<br>MIPS = \frac{指令数}{执行时间\times{10^6}} = \frac{时钟频率}{CPI\times{10^6}}<br>\end{split}\end{equation}  </p><p>引用用wiki上的一个例子：<br>一个400-MHz的处理器，运行一个基准测试负载，该负载所包含的指令信息以及指令周期数如下表所示  </p><div class="table-container"><table><thead><tr><th style="text-align:center">Instruction TYPE</th><th style="text-align:center">Instruction count</th><th style="text-align:center">Clock cycle count</th></tr></thead><tbody><tr><td style="text-align:center">Integer Arithmetic</td><td style="text-align:center">45000</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">Data transfer</td><td style="text-align:center">32000</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">Floating point</td><td style="text-align:center">15000</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">Control transfer</td><td style="text-align:center">8000</td><td style="text-align:center">2</td></tr></tbody></table></div><p>\begin{equation}\begin{split}<br>CPI = \frac{45000\times{1}+32000\times{2}+15000\times{2}+8000\times{2}}{100000} = 1.55<br>\end{split}\end{equation}  </p><p>400MHz = 400,000,000 Hz，假如用MIPS来衡量处理器性能，则有<br>\begin{equation}\begin{split}<br>MIPS = \frac{ClockFrequency}{CPI}\times\frac{1}{1 Million} = \frac{400,000,000}{1.55\times{1000000}} = 258 MIPS<br>\end{split}\end{equation}<br>执行所需的CPU时间为<br>\begin{equation}\begin{split}<br>Execution Time = CPI\times{Instruction count}\times{clocktime}\\<br>= \frac{CPI\times{instruction Count}}{ClockFrequency} = \frac{1.55\times{100000}}{400\times{1000000}} = \frac{1.55}{4000}\ <br>= 0.0003875 sec = 0.3785 ms<br>\end{split}\end{equation}  </p><h3 id="CACHE"><a href="#CACHE" class="headerlink" title="CACHE"></a>CACHE</h3><p>CPU要读取一个数据时，首先从Cache中查找，如果找到就立即读取并送给CPU处理；如果没有找到，就用相对慢的速度从内存中读取并送给CPU处理，同时把这个数据所在的数据块调入Cache中，可以使得以后对整块数据的读取都从Cache中进行，不必再调用内存。CPU在Cache中找到有用的数据被称为命中，当Cache中没有CPU所需的数据时（这时称为未命中），CPU才访问内存。为了保证CPU访问时有较高的命中率，Cache中的内容应该按一定的算法替换，其计数器清零过程可以把一些频繁调用后再不需要的数据淘汰出Cache，提高Cache的利用率。</p><p><a href="https://en.wikipedia.org/wiki/Cycles_per_instruction" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Cycles_per_instruction</a><br><a href="https://baike.baidu.com/item/CPU%E7%BC%93%E5%AD%98" target="_blank" rel="noopener">https://baike.baidu.com/item/CPU%E7%BC%93%E5%AD%98</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Cycles-per-instruction（CPI）&quot;&gt;&lt;a href=&quot;#Cycles-per-instruction（CPI）&quot; class=&quot;headerlink&quot; title=&quot;Cycles per instruction（CPI）&quot;&gt;&lt;/a&gt;Cycles per instruction（CPI）&lt;/h3&gt;&lt;p&gt;表示每条计算机指令执行所需的时钟周期，简称指令的平均周期数，即&lt;strong&gt;一个指令被执行时所使用的时钟周期数量&lt;/strong&gt;。对于一个程序，计算该程序执行完需要多少条机器指令（ins_num），并结合实际的硬件性能计算出需要多少个时钟周期来完成(cyc_num)&lt;br&gt;，可以得到该段程序在这个硬件上的CPI。对于不同的CPU，运行相同的负载得到的CPI是不同的，因此可以作为衡量不同CPU性能的一项指标。
    
    </summary>
    
      <category term="计算机系统" scheme="http://zanzong.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="性能指标" scheme="http://zanzong.github.io/tags/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>Spark RDD 宽依赖窄依赖介绍</title>
    <link href="http://zanzong.github.io/passages/d3b4b981.html"/>
    <id>http://zanzong.github.io/passages/d3b4b981.html</id>
    <published>2019-03-24T11:20:29.000Z</published>
    <updated>2019-03-24T11:42:33.201Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将介绍Spark RDD两种依赖关系——宽依赖、窄依赖，及其产生的相关特性</p></blockquote><hr><h2 id="Resilient-Distributed-Datasets"><a href="#Resilient-Distributed-Datasets" class="headerlink" title="Resilient Distributed Datasets"></a>Resilient Distributed Datasets</h2><p>RDD是一个容错、并行的数据结构，它可以直接将中间结果数据保存到内存中，通过控制数据分区优化存储，并提供丰富的数据操作接口<a href="http://people.csail.mit.edu/matei/papers/2012/nsdi_spark.pdf" target="_blank" rel="noopener">（nsdi2012）</a>。RDD的容错机制，使用一种粗粒度的transform来控制———RDD记录了如何产生结果数据的transform，而非实际的数据（即计算是lazy的），如果RDD的某个分区丢失，可以根据transform信息重新计算该partition来恢复丢失的数据。  <a id="more"></a>简言之，transformations使用lazy的操作定义了一个新的RDD,actions 触发计算执行并返回真正的结果数据。</p><h2 id="RDD-特性"><a href="#RDD-特性" class="headerlink" title="RDD 特性"></a>RDD 特性</h2><p>对于Apache Spark，RDD有如下的特性：</p><ul><li>RDD是只读对象</li><li>RDD可以通过加载本地文件系统或分布式文件系统中的数据获得（还可以通过数据+schema，通过SparkContext创建），或者通过其他RDD的transform变换得到。</li><li>数据的transformation操作是lazy的，Spark会根据transformation来构建DAG图，真正的计算执行由action来触发。</li><li>当内存不足时，RDD会溢出到磁盘上，并带来性能损失。</li><li>RDD具有容错机制，当一个RDD的部分partition丢失后，可以通过该RDD的<code>父RDD</code>重新计算该partition来恢复。</li><li>RDD适合用于实现批处理应用（Spark Streaming也是以micro batch的方式实现流计算模型）</li></ul><p>关于RDD的表达方式，作为一个抽象的数据对象，RDD使用以下5种信息来表达:  </p><ul><li>分区（partitions）：每个partition对应一个文件系统上的block，通过<code>partitions()</code>方法返回RDD的每个partition。  </li><li>依赖（dependencies）： 在父RDD上执行计算操作（function）来得到当前的RDD，通过<code>dependencies()</code>方法返回的依赖列表，获得该RDD的所有依赖。  </li><li>计算操作（function）：每个partition可以获得iterator对象，并实现作用于该迭代器的计算，完成特定的任务，如对分区中的每个元素map操作。  </li><li>分区方式（partition schema）：给出如何将数据划分到不同的partition的方法，Spark内置实现了两种partitioner——<code>HashPartitioner</code>和<code>RangePartitioner</code>。 </li><li>优先访问位置（data placement）：由于不同的partition可能存储在不同的机器，暴露出<code>preferredLocations(p)</code>方法来获得访问最快的数据存储节点列表，即partition p的优先访问位置。    </li></ul><h2 id="RDD依赖关系"><a href="#RDD依赖关系" class="headerlink" title="RDD依赖关系"></a>RDD依赖关系</h2><p>Spark将所有RDD构造成一个DAG图，RDD的容错机制依赖于lineage。如果一个RDD计算出错或丢失，那么可以从它的父RDD重新计算得到。所依赖的父RDD越少，这种recovery的代价就越小。根据数据是否可以以pipeline的方式在RDD之间转换，可以将依赖划分为宽依赖和窄依赖。<br><img src="/images/uploads/2018/08/rdd-deps-pic.png" alt></p><h4 id="窄依赖（narrow-dependencies）"><a href="#窄依赖（narrow-dependencies）" class="headerlink" title="窄依赖（narrow dependencies）"></a>窄依赖（narrow dependencies）</h4><p>父RDD的每个partition只能被一个子RDD所依赖，即父子partition的关系为<code>一对一</code>或<code>多对一</code>，例如map操作。<br>如上图左侧所示，常见的<code>map</code>、<code>filter</code>、<code>union</code>操作，不会影响RDD partition。对于输入已经进行协同划分(co-partitioned)的<code>join</code>操作，即数据已经事先按照key分组（也即是两个RDD有相同的Partitioner），也属于窄依赖。如图，进行协同划分后的两个父RDD，其子RDD的每个partiiton仅需依赖两个父RDD的partition。若子RDD<code>key1</code>所在分区计算失败，则仅仅需要重新计算该分区，拉取其依赖的两个partition。</p><blockquote><p>所谓协同划分，就是指定分区划分器以产生前后一致的分区安排。Pregel和HaLoop把这个作为系统内置的一部分；而Spark 默认提供两种划分器：HashPartitioner和RangePartitioner，允许程序通过partitionBy算子指定。Spark也允许用户自定义Partitioner来控制如何分区。</p></blockquote><h4 id="宽依赖（wide-dependencies）"><a href="#宽依赖（wide-dependencies）" class="headerlink" title="宽依赖（wide dependencies）"></a>宽依赖（wide dependencies）</h4><p>子RDD的每个partition都依赖于父RDD的所有partition，即存在<code>多对一</code>的关系，如groupByKey操作。<br>如上图右侧所示，在进行groupBy或无协同划分的join时，子RDD partition需要从父RDD的每个partition中拉取数据进行计算，即进行<code>shuffle</code>操作。分区对于shuffle操作很关键——如上图所示，同样对于join操作，进行协同划分后，两个父RDD之间、父RDD与子RDD之间能形成一致的分区，即保证了相同的key映射到同一分区，形成窄依赖；反之没有协同划分（上图右下），则形成宽依赖。</p><h4 id="Stage划分"><a href="#Stage划分" class="headerlink" title="Stage划分"></a>Stage划分</h4><p>在窄依赖的流程中，Spark可以以pipeline的方式计算各个RDD，即数据按照各部窄依赖操作向后流动，无需等每个节点计算完后再计算下一节点，大大提高计算性能。而一旦碰上宽依赖，该流水线则停止。例如执行groupByKey操作的RDD，需要每个分区都计算完成后，再进行shuffle操作，得到新的partition（上图右上）。<br>Spark将task划分为多个<code>stage</code>，而stage就是根据依赖关系来划分的。Spark DAGScheduler将回溯当前的RDD依赖图，每当遇到宽依赖，则将之前的task划分为一个stage，以此往复得到多个stage，每个stage中以pipeline的方式执行。因此每个stage的最后一个task往往是耗时的shuffle操作。</p><h4 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h4><p><em>分区丢失</em><br>基于lineage的实现非常有利于系统容错。假如发生节点宕机，丢失RDD A的partition 1，若是窄依赖，只需要求RDD A的父RDD存在，根据父RDD对应分区重算即可，跟其他节点没有依赖；而若是宽依赖，则需要所有父RDD的所有分区都存在，重新计算的代价较高。<br><em>设置检查点</em><br>如果RDD依赖的lineage较长，Spark提供API<code>rdd.checkpoint</code>使用checkpoint这个transform操作来做检查点。checkpoint操作会将该RDD数据写入到SparkContext中配置的CheckpointDir，持久化到磁盘（HDFS）。可以考虑在计算耗时的宽依赖设置检查点。  </p><h4 id="优化机制"><a href="#优化机制" class="headerlink" title="优化机制"></a>优化机制</h4><p><em>缓存</em><br>假如需要计算<code>rdd.count()</code>，若第一次执行，则Spark会将该rdd的所有依赖进行计算（注意RDD不是数据，只是记录着如何产生该数据），得到count的结果。但如果代码中再次调用<code>rdd.count()</code>呢？Spark会和上次一样重新查找rdd的依赖，计算出结果，造成了重复的计算。为了解决这种问题，Spark RDD暴露了两个接口<code>cache</code>和<code>persist</code>。其中，<code>persist</code>可以设置多种<a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html#rdd-persistence" target="_blank" rel="noopener">缓存级别</a>，而<code>cache</code>等同于<code>persist(MEMORY_ONLY)</code>。<br><em>广播变量</em><br>根据Spark官方文档，适合将“static look up tables”设置为广播变量。即在RDD计算过程中，可能需要一些静态的信息用于查询，如在map中访问一个人员信息的List，该List内容不可变。尽管在<code>map</code>中可以直接访问这些变量，但可能需要跨机器的访问这些数据，当数据量较大时，就产生了<code>shuffle</code>。因此，将一些不可变的数据，以broadcast的形式，分发到每个节点，使得查询过程避免了<code>shuffle</code>操作。</p><p>参考文献：<br>[1].<a href="http://people.csail.mit.edu/matei/papers/2012/nsdi_spark.pdf" target="_blank" rel="noopener">http://people.csail.mit.edu/matei/papers/2012/nsdi_spark.pdf</a><br>[2].<a href="https://blog.csdn.net/houmou/article/details/52531205" target="_blank" rel="noopener">https://blog.csdn.net/houmou/article/details/52531205</a><br>[3].<a href="http://www.beingsoftwareprofessional.com/2016/02/04/apache-spark-rdd/" target="_blank" rel="noopener">http://www.beingsoftwareprofessional.com/2016/02/04/apache-spark-rdd/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将介绍Spark RDD两种依赖关系——宽依赖、窄依赖，及其产生的相关特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Resilient-Distributed-Datasets&quot;&gt;&lt;a href=&quot;#Resilient-Distributed-Datasets&quot; class=&quot;headerlink&quot; title=&quot;Resilient Distributed Datasets&quot;&gt;&lt;/a&gt;Resilient Distributed Datasets&lt;/h2&gt;&lt;p&gt;RDD是一个容错、并行的数据结构，它可以直接将中间结果数据保存到内存中，通过控制数据分区优化存储，并提供丰富的数据操作接口&lt;a href=&quot;http://people.csail.mit.edu/matei/papers/2012/nsdi_spark.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;（nsdi2012）&lt;/a&gt;。RDD的容错机制，使用一种粗粒度的transform来控制———RDD记录了如何产生结果数据的transform，而非实际的数据（即计算是lazy的），如果RDD的某个分区丢失，可以根据transform信息重新计算该partition来恢复丢失的数据。
    
    </summary>
    
      <category term="大数据系统" scheme="http://zanzong.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Spark" scheme="http://zanzong.github.io/tags/Spark/"/>
    
      <category term="大数据" scheme="http://zanzong.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>我陪着你呀</title>
    <link href="http://zanzong.github.io/passages/29bba495.html"/>
    <id>http://zanzong.github.io/passages/29bba495.html</id>
    <published>2019-03-24T11:17:16.000Z</published>
    <updated>2019-08-28T02:12:31.734Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Enter password to read." />    <label for="pass">Enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Enter password to read.
    
    </summary>
    
      <category term="生活" scheme="http://zanzong.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日常" scheme="http://zanzong.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Apache Hadoop YARN 产生背景和需求</title>
    <link href="http://zanzong.github.io/passages/6c658b9d.html"/>
    <id>http://zanzong.github.io/passages/6c658b9d.html</id>
    <published>2019-03-24T10:25:44.000Z</published>
    <updated>2019-03-24T12:41:16.893Z</updated>
    
    <content type="html"><![CDATA[<hr><p>本文主要翻译自论文：<br><a href="https://www.sics.se/~amir/files/download/dic/2013%20-%20Apache%20Hadoop%20YARN:%20Yet%20Another%20Resource%20Negotiator%20%28SoCC%29.pdf" target="_blank" rel="noopener">Apache Hadoop YARN: Yet Another Resource Negotiator</a></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Hadoop设计之初，目的在于使用MapReduce作业，处理大量的网络数据。得益于快速增长的各类科技公司,Hadoop成为了数据和计算资源的“市场”——数据和计算资源共享。广泛而普遍的使用，超出了它最初的设计目标，让它暴露出两个关键的缺点：</p><blockquote><ol><li>编程模型（MapReduce）和资源管理框架之间紧密的联系，迫使开发者滥用MapReduce模型。</li><li>集中式的作业流程控制（JobTrack和TaskTrack），使得调度的面临扩展问题（集群job数量越大越明显）</li></ol></blockquote><a id="more"></a><p>在这篇文章中，总结了关于下一代Hadoop资源管理框架YARN的设计、开发以及部署情况。新的架构，从资源管理的功能中解耦了编程模型（mapreduce），并且增加了许多针对application的调度功能。并由相关的实验数据，证明了该架构确实行之有效，实验数据来源于Yahoo的Hadoop集群。并通过运行在YARN上的计算框架，例如Dryad、Giraph、Hoya、Hadoop MapReduce、REEF、Spark、Storm、Tez等，证明YARN具有良好的扩展性。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>Apache Hadoop是一个开源的实现了MapReduce模型的计算框架之一，最初主要解决<strong>搜索引擎面临的海量的数据扩展性差</strong>的问题，并着重于数据密集型计算的<strong>容错性</strong>的问题，被很多大型网络公司和创业公司所使用。更重要的是，它成为了一个工程是和研究人员获得计算资源和存储资源的平台。这导致了Hadoop的成功，也带来了很多骂声，因为很多开发者滥用MapReduce导致了程序过多的使用了集群资源。举个栗子，一个常见的场景就是提交“map-only”的作业时，产生大量map task个而不考虑集群资源，还有就是web server这种长的负载以及成群的需要迭代计算的负载。而开发者为了自己获得足够的物理资源，常常通过一些方法来回避MapReduce API的限制，去占用了过多的资源。</p><p>正是这些局限性和资源的滥用，产生了以Hadoop为基础的环境无关方面的论文，很多论文暴露了Hadoop架构和实现方面的问题，以及资源滥用来带的负面影响。并且这些Hadoop架构中的局限性已经被学术界和开源社区所认识。</p><p>本文中，展示了一些由社区主导的来推动Hadoop发展的成果，以及下一代Hadoop计算平台组件YARN。它是从之前整体的架构中，将之前对于每个作业调度的资源管理功能从编程模型中分离出来。在这种新的架构中，MapReduce运行在YARN上的众多应用中的一种，使得在选择计算框架时有很大的灵活性而不仅限于Hadoop MapReduce，并且可以动态的调整以获得性能（可能是资源利用率）的提高。</p><h2 id="2-历史"><a href="#2-历史" class="headerlink" title="2 历史"></a>2 历史</h2><p>YARN的需求是在Hadoop MapReduce发展过程中产生的。随着集群规模的扩大和用户的增多，逐渐暴露出来的弊端促进了Hadoop MapReduce的发展，其中的经验和问题催生了YARN，列举如下：</p><blockquote><ol><li>扩展性</li><li>多租户</li><li>可维护性</li><li>存储位置敏感</li><li>高集群利用率</li><li>可用性</li><li>安全和审计操作的功能</li><li>多样化的编程模型</li><li>灵活的资源模型</li><li>向后兼容性</li></ol></blockquote><p>在实践中YARN的需求时怎样产生的呢？从2006年起，Yahoo！开始采用Apache Hadoop作为基础设施来运行其“WebMap”应用，它构建了一个web网站之间的<code>图（graph）</code>结构，该应用为其搜索引擎提供服务。同时，该网站图（web graph）包含了超过一千亿个节点和一万亿的边。之前名为<code>Dreadnaught</code>的底层基础设施在800台机器的集群中已经遇到了扩展的瓶颈，因此需要一个代替它的框架。Dreadnaught是不能满足类似于MapReduce的分布式作业的，因此需要采用扩展性较好的MapReduce框架，来实现搜索业务的顺利迁移。因此<strong>扩展性</strong>成为了早期Hadoop版本以至于后来的YARN着重考虑的因素。</p><p>除了雅虎搜索引擎大规模的流水作业，在广告分析优化、垃圾邮件过滤、内容优化等方面的需求也驱动了Hadoop发展。同时，Hadoop社区为了扩展Hadoop平台以适应更大规模的MapReduce作业，<strong>多租户</strong>的目标开始成型。在这个过程中，大家也更好的理解了工程开发的优先级和一些中间的阶段。</p><h3 id="2-1-专用集群的时代"><a href="#2-1-专用集群的时代" class="headerlink" title="2.1 专用集群的时代"></a>2.1 专用集群的时代</h3><p>一些早期的Hadoop用户将集群部署在少数节点上，从HDFS加载数据，通过MapReduce计算数据并拉取结果。随着Hadoop的容错机制的完善，将数据持久化到HDFS成为了一个标准。而在雅虎，工程师将加载数据集到一个共享的集群中，这吸引了研究人员兴趣。尽管大规模的计算仍然是开发Hadoop的主要动力，然而HDFS也需要权限模型，分配机制等特性来提高多租户使用的能力。</p><p>为了定位一些多租户使用的问题，雅虎开发并部署了Hadoop on Demand（<code>HOD</code>），它使用<a href="http://www.adaptivecomputing.com/products/open-source/torque/" target="_blank" rel="noopener"><code>Torque</code></a>和<a href="http://www.adaptivecomputing.com/products/open-source/maui/" target="_blank" rel="noopener"><code>Maui</code></a>共享集群物理资源并分配给Hadoop。用户可以向Torque在共享资源池中为作业申请节点，作业会被提交到队列中等待，直到有足够节点可用时才开始运行。当作业运行时，HoD会在主节点启动一个leader进程，它会和Torque，Maui通信并启动slave，随后启动<code>JobTracker</code>和<code>TaskTracker</code>。当用户使用完资源后，节点会被释放，重新回到资源池中。因为HoD为每个作业都启动一个新的集群，所以开发者在测试新版本Hadoop的同时，旧版本Hadoop的运行不受影响。然而Hadoop每三个月就会更新一次主版本，HoD的灵活性难以跟得上这个节奏，于是需要对HoD进行解耦升级工作——增加<strong>可维护性</strong>。</p><p>由于HoD中也可以部署HDFS集群，大多数用户部署计算节点时使用了共享的HDFS实例。随着HDFS集群规模扩展，越来越多的计算节点运行在HDFS的服务之上，提高了数据的用户密度，形成了一个良性循环，打开了一块新的天地。</p><p>实践证明HoD是一个通用框架，它拥有一些<code>Mesos</code>的特性，扩展了framework-master模型，来支持多样的并发编程模型的动态资源分配。它也可以被认为是私有云先驱者，例如AWS的EC2 Elastic MapReduce，微软的Azure HDInsight</p><h3 id="2-2-Hadoop不能满足需求"><a href="#2-2-Hadoop不能满足需求" class="headerlink" title="2.2 Hadoop不能满足需求"></a>2.2 Hadoop不能满足需求</h3><p>雅虎最后由于平庸的集群资源利用率而淘汰了HoD。在<code>map</code>阶段，JobTracker力求task放在离输入数据最近的节点上，最近的当然就是存储该数据的HDFS块所在的节点上。但是由于Torque在分配节点时没有考虑数据位置，分配给用户JobTracker的节点中，可能只包含了部分的数据副本，因此很可能这台机器上并没有task所需的输入数据，于是就需要从其他节点上拉取数据。当作业由大量的task都需要这样的时候，资源争抢会异常激烈。当TaskTracker分布的各个机架时，更增加了跨机架读取数据的可能性，并且在<code>shuffle</code>的时候必然要跨机架的拉取数据，使得按DAG执行的后面的作业也如此。因此关于<strong>存储的位置敏感</strong>（Locality awareness），也是YARN的关键需求之一。</p><p>高层的框架，例如Pig、Hive常常构造MapReduce的工作流成为一个有向无环图（<code>DAG</code>），在计算的每个阶段过滤、聚和、转换数据。因为在使用HoD时，集群大小在创建后是不能调整的，大量的集群资源在等待其他作业执行时是空闲的。一个极端但是却常见的情况就是，只在一个节点上运行的<code>reduce task</code>可能会因为运行时间过长导致该节点资源一直无法被收回，而其他节点此时是空闲的。</p><p>最后，作业响应时间由集群分配时间主导的，而用户很难判断作业到底需要多少节点去执行，常常凭直觉去申请数以十倍的资源。而集群分配时间又很长，以至于用户分配到资源后常常和同事一起使用，这使得这些资源一直被占着无法释放，从而形成让资源分配时间更长的恶性循环。尽管如此，用户也深爱着HoD的一些特性，从经济的角度考量，使得雅虎必须让员工使用共享的集群资源。因此，<strong>高集群利用率</strong>成了YARN的一个高优先级需求。</p><h3 id="2-3-共享集群"><a href="#2-3-共享集群" class="headerlink" title="2.3 共享集群"></a>2.3 共享集群</h3><p>最后，HoD已经无法合理的在资源分配时做出选择，资源分配的粒度太粗，并且它的API迫使用户写一些令人误解的对申请资源的约束条件。然而，向共享集群前进的意义是巨大的。尽管HDFS的规模在过去几年中逐渐扩大，上层的JobTracker却已经被<code>HoD</code>隔离开了。当去掉<code>HoD</code>之后，MapReduce集群规模突然增大，作业吞吐量剧烈增加，一些特性被平白无故的加入到JobTracker中，为一些大bug的埋下了隐患。更糟糕的，一个JobTracker的失败可导致运行中断，并且该集群中所有的作业需要用户手动重新按工作流执行，而之前只是会丢掉当前这一个工作流程的结果。</p><p>集群停掉之后，作业流水线上积累了很多待执行的作业，当集群重启后，JobTracker的压力猛增。以至于重启后常常需要手动杀死一些用户的作业，直到集群被正常的启动。由于每个作业存储的复杂性，在集群重启时保护已提交作业的实现方案一直存在着BUG。</p><p>维护一个多租户的的Hadoop集群是很困难的。当很多接口暴露给用户时，<code>容错能力</code>成了核心的设计原则。针对单点失败，暴露出各种关于可用性的问题，并指出持续的在集群中监控作业是有争议的。具体来说，因为JobTracker需要为每个作业分配监进程的资源，它的访问控制逻辑包含了安全机制来确保自身的可用性；它可能延迟分配出可用资源，因为JobTracker为了监控作业使用了过多的资源。这些都可归结到<strong>可用性</strong>方面上。</p><p>当Hadoop集群的租户增多，并且提交作业类型以及数据来源多种多样，于是资源隔离的问题凸显出来。但是授权模型不够强大，并且没有良好的扩展性，这是多租户集群的一个关键问题。<strong>安全和审计操作</strong>的功能必须在YARN中保留。开发者逐渐增强了这个系统，使其不同于以往基于<code>槽</code>（slot）的资源管理，来适应多样化的资源需求。</p><p>虽然MapReduce支持广泛的使用场景，但并不是一个对所有大规模计算都理想的模型。例如，很多机器学习算法的需要多次的迭代才能得出结果。如果一系列的Mapreduce作业包含这种计算，无疑调度的开销会延迟结果的产生。类似的，<a href="https://en.wikipedia.org/wiki/Bulk_synchronous_parallel" target="_blank" rel="noopener"><code>BSP</code></a>（bulk-synchronous parallel model）模型可以更好的表示许多图算法。 相比于大规模的MapReduce作业的容错机制中的all-to-all的交互障碍，图的节点之间的交互是更合适的。（<em>all-to-all:from a Map stage to the next Reduce stage, one-to-one:from a Reduce stage to the next Map stage.</em><a href="http://dprg.cs.uiuc.edu/docs/iss-socc/socc077-ko.pdf" target="_blank" rel="noopener">另一篇论文</a>）。这种不协调阻碍了用户的生产力，然而MapReduce的中心资源模型是<code>无资源竞争模型</code>。Hadoop在Yahoo的广泛部署以及其数据流水线的重要性加剧了这种矛盾，更糟糕的是，用户通常使用多种框架编写MapReduce程序。对于调度器而言，这种作业被视为<code>map-only</code>的作业，它们常常有完全不同的资源使用曲线，使平台的对作业的预估不准确，拉低了资源利用率，容易产生死锁并增大了不稳定性。因此，YARN必须支持<strong>多样化的编程模型</strong>。</p><p>除了与新型框架需求的不匹配之外，<code>槽</code>的类型固定也会损害利用率。尽管将槽划分为map槽和reduce槽可以防止槽死锁，但这也成为了资源使用的瓶颈。在Hadoop中，由用户为每个作业设置两个阶段的重叠部分，晚启动reduce作业可以增加集群的吞吐量，而早启动reduce作业可以减少执行的时延。map槽和reduce槽的数量是由集群管理员设定的，map槽不能执行reduce task，反之，reduce槽也不能执行map task。因为map task和reduce task的比例通常是不同的，所以没有一种配置能够完美的平衡。任意一种槽出现饱和，<code>JobTracker</code>就很难再初始化新的作业并顺利执行。可实现复杂的调度但又不浪费集群的资源，这突出了对<strong>灵活的资源模型</strong>的需求。</p><p>尽管相比于<code>HoD</code>，共享集群提高了资源利用率，它也引起了对可维护性和可用性的担忧。在集群中部署新版本Hadoop是一件需要很谨慎也很平常的事儿，当修复了MapReduce实现中的bug，需要重启集群再提交作业。通过将资源管理平台和编程框架合并，使它们都得到了发展；当用户提升了平台分配资源的效率，与平台整合的框架也要相应的改变。尽管升级通常仅仅只需要重新编译，但用户的对框架内部细节的一些假设（或者开发者对用户程序的一些假设）也可能会产生一些不兼容。</p><p><center>![](/images/uploads/2017/04/20170409110122.jpg)图一 YARN架构（蓝色的是YARN的系统组件，黄色和粉色是两个运行在YARN上的应用）</center><br>建立在Apache Hadoop MapReduce发展的基础上，YARN就是为了解决这些需求（R1-R9）。然而有大量的已经部署的MapReduce应用，以及Hadoop生态系统中相关的项目，使得YARN在设计需要保持兼容性，新架构需要尽量重用之前框架的代码。这也是YARN的最后一个需求：<strong>向后兼容性</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;本文主要翻译自论文：&lt;br&gt;&lt;a href=&quot;https://www.sics.se/~amir/files/download/dic/2013%20-%20Apache%20Hadoop%20YARN:%20Yet%20Another%20Resource%20Negotiator%20%28SoCC%29.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache Hadoop YARN: Yet Another Resource Negotiator&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;Hadoop设计之初，目的在于使用MapReduce作业，处理大量的网络数据。得益于快速增长的各类科技公司,Hadoop成为了数据和计算资源的“市场”——数据和计算资源共享。广泛而普遍的使用，超出了它最初的设计目标，让它暴露出两个关键的缺点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;编程模型（MapReduce）和资源管理框架之间紧密的联系，迫使开发者滥用MapReduce模型。&lt;/li&gt;
&lt;li&gt;集中式的作业流程控制（JobTrack和TaskTrack），使得调度的面临扩展问题（集群job数量越大越明显）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://zanzong.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://zanzong.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="资源调度" scheme="http://zanzong.github.io/tags/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/"/>
    
  </entry>
  
</feed>
